<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>standard</category>
        <client_script><![CDATA[function happyList($scope, $location, $rootScope, spUtil, $interpolate) {
    var c = this;

    this.data.filterText = "";
    this.showFilter = false;

    this.onClick = function($event, item, url, action) {
        $event.stopPropagation();
        $event.preventDefault();
        if (typeof url === "string") {
            var urlExp = $interpolate(url);
            url = urlExp(item);
            $location.url(url);
        } else if (url && typeof url === "object") {
            $location.search(url);
        } else {
            var evt = {};
            evt.url = url;
            evt.table = item.className;
            evt.sys_id = item.sys_id;
            evt.record = item;
            evt.rectangle_id = c.options.sys_id;
            evt.action = action;
            // put out the selection with simple list "sl_" prefix
            $location.search('sl_sys_id', evt.sys_id);
            $location.search('sl_table', evt.table);
            $location.search('spa', 1); // spa means "I've got this"
            $rootScope.$broadcast('$sp.list.click', evt);
        }
    };

    if (c.options.table && c.options.disable_record_watcher !== 'true') {
        spUtil.recordWatch($scope, c.options.table, c.options.filter);
    }

    this.getMaxShownLabel = function(maxEntries, totalCount) {
        if (totalCount === c.data.maxCount) {
            return `First ${maxEntries} of more than ${totalCount}`;
        }

        return `First ${maxEntries} of ${totalCount}`;
    };

    this.seeAllPage = c.options.list_page_dv || 'list';
    this.targetPageID = (c.options.sp_page) ? `&target_page_id=${c.options.sp_page}` : "";

    c.getMaxHeight = function() {
        return c.options.panel_body_height || 'none';
    };

    c.getPropertyInfo = function(item) {
        return {
            Number: item.number,
            Description: item.description,
            Price: item.price,
            PostCode: item.post_code
        };
    };

    c.getActionColor = function(action) {
        return "text-" + action.color;
    };

    c.update = function update() {
        c.server.update();
    };

    c.toggleFilter = function() {
        c.showFilter = !c.showFilter;
    };
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel {
position: relative;
}

.panel-heading i {
  cursor: pointer;
  position: absolute;
  padding: 10px;
  top: 0px;
  right: 0px;
  cursor: pointer;
}

.disabled-filter {
	color: #A0A0A0;
}

.list-group-item.ng-enter {
  transition: all 1s;
  -webkit-transition: all 1s;

  background-color: #c0dcfa;
}

.list-group-item.ng-enter-active {
  background-color: #fff;
}

.hide-x-overflow {
  overflow-x: hidden;
}

.translated-html &gt; p {
  margin: 0px;
  padding: 0px;
}

IMG {
  max-width: 320px;
  max-height: 240px;
}

IMG.img-sm {
  max-height: 40px;
  max-width: 40px;
}

.filter-box {
  margin-top: 10px;
}

.panel-footer {
  .number-shown-label {
    margin-top: 0;
    margin-bottom: 0;
    font-size: 16px;
    display: inline-block;
  }

  a {
    color: inherit;
  }
}

.panel-title .fa {
    padding-right: 4px;
}

.list-group-item &gt; a {
	display: inline-block;
}</css>
        <data_table>sp_instance_vlist</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,filter,maximum_entries,display_field,color,size,glyph,sp_page</field_list>
        <has_preview>false</has_preview>
        <id>happy_list_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Happy List Widget</name>
        <option_schema>[{"name":"always_show","section":"Behavior","label":"Show even when empty","type":"boolean"},{"name":"panel_body_height","section":"Presentation","label":"List body height","type":"string"},{"name":"image_field","section":"Presentation","label":"Image field","type":"field_name"},{"name":"secondary_fields","section":"Data","label":"Secondary fields","type":"field_list"},{"name":"rounded_images","section":"Presentation","label":"Rounded images","type":"boolean"},{"displayValue":"Page","name":"list_page","section":"Data","label":"List page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"name":"hide_footer","section":"Presentation","label":"Hide Footer","type":"boolean"},{"displayValue":"UI View","hint":"View to use when target page is a form","name":"view","section":"Behavior","label":"View","type":"reference","value":"sys_ui_view","ed":{"reference":"sys_ui_view"}},{"hint":"If checked, Simple List will not automatically updated based on changes to the filtered records","name":"disable_record_watcher","section":"Behavior","label":"Disable record watcher","type":"boolean"},{"name":"filter_acls","section":"Data","default_value":"false","label":"Enforce field-level Read ACLs on Filter query terms (may alter the query for unprivileged users)","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles>admin,user</roles>
        <script><![CDATA[(function () {
    data.filterMsg = gs.getMessage("Filter...");
    data.viewAllMsg = gs.getMessage("View all");
    if (gs.nil(options.hide_footer))
        options.hide_footer = false;
    options.hide_footer = (options.hide_footer == "true" || options.hide_footer == true);
    options.table = $sp.getParameter('t') || options.table;
    if (!options.table)
        return;

    if (!gs.getSession().isLoggedIn() && !new SNCACLUtil().hasPublicAccess(options.table)) {
        gs.warn("Deny access to table which is not public: " + options.table);
        data.isValid = false;
        return;
    }

    var gr = new GlideRecordSecure(options.table); // does ACL checking for us
    if (!gr.isValid()) {
        data.isValid = false;
        return;
    } else
        data.isValid = true;
    // grTemp is used to check isValidField since using GlideRecordSecure fails for date/time fields
    var grTemp = new GlideRecord(options.table);
    if (options.filter_acls == "true")
        gr = $sp.addQueryString(gr, options.filter);
    else
        gr.addEncodedQuery(options.filter);
    options.title = options.title || gr.getPlural();
    options.display_field = $sp.getParameter('f') || options.display_field;
    if (!options.display_field || !grTemp.isValidField(options.display_field))
        options.display_field = gr.getDisplayName();

    if (input && input.filterText)
        gr.addEncodedQuery(options.display_field + "LIKE" + input.filterText);

    options.title = options.title || gr.getPlural();
    options.secondary_fields = options.secondary_fields || "";
    options.secondary_fields = options.secondary_fields.split(",");
    if (!options.order_by || !grTemp.isValidField(options.order_by))
        options.order_by = options.display_field;

    // Set ID of sp_page from option schema
    if (options.list_page) {
        var sp_page = GlideRecord('sp_page');
        if (sp_page.get(options.list_page))
            options.list_page_dv = sp_page.getDisplayValue('id');
    }

    // redo query with limit
    if (options.order_direction == "asc")
        gr.orderBy(options.order_by);
    else
        gr.orderByDesc(options.order_by);

    data.maxCount = 500;
    gr.setLimit(data.maxCount);
    gr.query();

    data.count = gr.getRowCount();
    data.actions = getActions();
    data.list = [];
    var recordIdx = 0;
    while (gr.next()) {
        if (options.maximum_entries && recordIdx == options.maximum_entries)
            break;

        var record = {};
        if (data.actions.length > 0) {
            record.Number = gr.getValue('number'); // Assuming 'number' is the field name for Number
            record.Description = gr.getValue('description'); // Assuming 'description' is the field name for Description
            record.Price = gr.getValue('price'); // Assuming 'price' is the field name for Price
            record.PostCode = gr.getValue('post_code'); // Assuming 'post_code' is the field name for Post Code
        }

        record.sys_id = gr.getValue('sys_id');
        record.className = gr.getRecordClassName();
        if (options.image_field) {
            record.image_field = gr.getDisplayValue(options.image_field);
            if (!record.image_field)
                record.image_field = "noimage.pngx";
        }

        if (options.display_field)
            record.display_field = getField(gr, options.display_field);

        record.secondary_fields = [];
        options.secondary_fields.forEach(function (f) {
            record.secondary_fields.push(getField(gr, f));
        });

        if (options.sp_page) {
            var view = "sp";
            if (options.view) {
                var viewGR = new GlideRecord("sys_ui_view");
                viewGR.get(options.view);
                view = viewGR.getValue("name");
            }
            record.url = { id: options.sp_page, table: record.className, sys_id: record.sys_id, view: view };
        } else if (options.url != '')
            record.url = options.url;
        else
            record.url = null;

        data.list.push(record);
        recordIdx++;
    }

    function getField(gr, name) {
        var f = {};
        f.display_value = gr.getDisplayValue(name);
        f.value = gr.getValue(name);
        var ge = gr.getElement(name);
        if (ge == null)
            return f;

        f.type = ge.getED().getInternalType();
        if (f.type == "glide_date_time")
            f.isFuture = gs.dateDiff(gr.getValue(name), gs.nowNoTZ(), true) < 0;
        else if (f.type == "glide_date")
            f.isFuture = gs.dateDiff(gr.getValue(name), gs.now(), true) < 0;
        f.label = ge.getLabel();
        return f;
    }

    function getActions() {
        return JSON.parse($sp.getSPVlistActions($sp.getValue("sys_id")));
    }

})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-15 09:55:46</sys_created_on>
        <sys_id>dae1ce7693cfb1101c3a3a5efaba1020</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Happy List Widget</sys_name>
        <sys_package display_value="HappyImmo" source="x_1129837_happyimm">4dbd9096930731101c3a3a5efaba10a4</sys_package>
        <sys_policy/>
        <sys_scope display_value="HappyImmo">4dbd9096930731101c3a3a5efaba10a4</sys_scope>
        <sys_update_name>sp_widget_dae1ce7693cfb1101c3a3a5efaba1020</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-15 10:12:29</sys_updated_on>
        <template><![CDATA[<div>
    <input type="text" ng-model="c.data.filterText" ng-show="c.showFilter" placeholder="Filter...">
    <button ng-click="c.toggleFilter()">Toggle Filter</button>
</div>

<div ng-repeat="item in c.data.list">
    <div>
        <h3>{{ c.getPropertyInfo(item).Number }}</h3>
        <p>{{ c.getPropertyInfo(item).Description }}</p>
        <p>Price: {{ c.getPropertyInfo(item).Price }}</p>
        <p>Post Code: {{ c.getPropertyInfo(item).PostCode }}</p>
        <!-- Add any additional HTML markup for each property -->
        <button ng-click="c.onClick($event, item, 'yourUrl', 'yourAction')">Click me</button>
    </div>
</div>
]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="HappyImmo">4dbd9096930731101c3a3a5efaba10a4</application>
        <file_path/>
        <instance_id>45b65c1f1b4eb5d019254089bd4bcb77</instance_id>
        <instance_name>dev196055</instance_name>
        <name>sp_widget_dae1ce7693cfb1101c3a3a5efaba1020</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function happyList($scope, $location, $rootScope, spUtil, $interpolate) {
    var c = this;

    this.data.filterText = "";
    this.showFilter = false;

    this.onClick = function($event, item, url, action) {
        $event.stopPropagation();
        $event.preventDefault();
        if (typeof url === "string") {
            var urlExp = $interpolate(url);
            url = urlExp(item);
            $location.url(url);
        } else if (url &amp;&amp; typeof url === "object") {
            $location.search(url);
        } else {
            var evt = {};
            evt.url = url;
            evt.table = item.className;
            evt.sys_id = item.sys_id;
            evt.record = item;
            evt.rectangle_id = c.options.sys_id;
            evt.action = action;
            // put out the selection with simple list "sl_" prefix
            $location.search('sl_sys_id', evt.sys_id);
            $location.search('sl_table', evt.table);
            $location.search('spa', 1); // spa means "I've got this"
            $rootScope.$broadcast('$sp.list.click', evt);
        }
    };

    if (c.options.table &amp;&amp; c.options.disable_record_watcher !== 'true') {
        spUtil.recordWatch($scope, c.options.table, c.options.filter);
    }

    this.getMaxShownLabel = function(maxEntries, totalCount) {
        if (totalCount === c.data.maxCount) {
            return `First ${maxEntries} of more than ${totalCount}`;
        }

        return `First ${maxEntries} of ${totalCount}`;
    };

    this.seeAllPage = c.options.list_page_dv || 'list';
    this.targetPageID = (c.options.sp_page) ? `&amp;target_page_id=${c.options.sp_page}` : "";

    c.getMaxHeight = function() {
        return c.options.panel_body_height || 'none';
    };

    c.getPropertyInfo = function(item) {
        return {
            Number: item.number,
            Description: item.description,
            Price: item.price,
            PostCode: item.post_code
        };
    };

    c.getActionColor = function(action) {
        return "text-" + action.color;
    };

    c.update = function update() {
        c.server.update();
    };

    c.toggleFilter = function() {
        c.showFilter = !c.showFilter;
    };
}
]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.panel {
position: relative;
}

.panel-heading i {
  cursor: pointer;
  position: absolute;
  padding: 10px;
  top: 0px;
  right: 0px;
  cursor: pointer;
}

.disabled-filter {
	color: #A0A0A0;
}

.list-group-item.ng-enter {
  transition: all 1s;
  -webkit-transition: all 1s;

  background-color: #c0dcfa;
}

.list-group-item.ng-enter-active {
  background-color: #fff;
}

.hide-x-overflow {
  overflow-x: hidden;
}

.translated-html &amp;gt; p {
  margin: 0px;
  padding: 0px;
}

IMG {
  max-width: 320px;
  max-height: 240px;
}

IMG.img-sm {
  max-height: 40px;
  max-width: 40px;
}

.filter-box {
  margin-top: 10px;
}

.panel-footer {
  .number-shown-label {
    margin-top: 0;
    margin-bottom: 0;
    font-size: 16px;
    display: inline-block;
  }

  a {
    color: inherit;
  }
}

.panel-title .fa {
    padding-right: 4px;
}

.list-group-item &amp;gt; a {
	display: inline-block;
}&lt;/css&gt;&lt;data_table&gt;sp_instance_vlist&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list&gt;table,filter,maximum_entries,display_field,color,size,glyph,sp_page&lt;/field_list&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;happy_list_widget&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Happy List Widget&lt;/name&gt;&lt;option_schema&gt;[{"name":"always_show","section":"Behavior","label":"Show even when empty","type":"boolean"},{"name":"panel_body_height","section":"Presentation","label":"List body height","type":"string"},{"name":"image_field","section":"Presentation","label":"Image field","type":"field_name"},{"name":"secondary_fields","section":"Data","label":"Secondary fields","type":"field_list"},{"name":"rounded_images","section":"Presentation","label":"Rounded images","type":"boolean"},{"displayValue":"Page","name":"list_page","section":"Data","label":"List page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"name":"hide_footer","section":"Presentation","label":"Hide Footer","type":"boolean"},{"displayValue":"UI View","hint":"View to use when target page is a form","name":"view","section":"Behavior","label":"View","type":"reference","value":"sys_ui_view","ed":{"reference":"sys_ui_view"}},{"hint":"If checked, Simple List will not automatically updated based on changes to the filtered records","name":"disable_record_watcher","section":"Behavior","label":"Disable record watcher","type":"boolean"},{"name":"filter_acls","section":"Data","default_value":"false","label":"Enforce field-level Read ACLs on Filter query terms (may alter the query for unprivileged users)","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles&gt;admin,user&lt;/roles&gt;&lt;script&gt;&lt;![CDATA[(function () {
    data.filterMsg = gs.getMessage("Filter...");
    data.viewAllMsg = gs.getMessage("View all");
    if (gs.nil(options.hide_footer))
        options.hide_footer = false;
    options.hide_footer = (options.hide_footer == "true" || options.hide_footer == true);
    options.table = $sp.getParameter('t') || options.table;
    if (!options.table)
        return;

    if (!gs.getSession().isLoggedIn() &amp;&amp; !new SNCACLUtil().hasPublicAccess(options.table)) {
        gs.warn("Deny access to table which is not public: " + options.table);
        data.isValid = false;
        return;
    }

    var gr = new GlideRecordSecure(options.table); // does ACL checking for us
    if (!gr.isValid()) {
        data.isValid = false;
        return;
    } else
        data.isValid = true;
    // grTemp is used to check isValidField since using GlideRecordSecure fails for date/time fields
    var grTemp = new GlideRecord(options.table);
    if (options.filter_acls == "true")
        gr = $sp.addQueryString(gr, options.filter);
    else
        gr.addEncodedQuery(options.filter);
    options.title = options.title || gr.getPlural();
    options.display_field = $sp.getParameter('f') || options.display_field;
    if (!options.display_field || !grTemp.isValidField(options.display_field))
        options.display_field = gr.getDisplayName();

    if (input &amp;&amp; input.filterText)
        gr.addEncodedQuery(options.display_field + "LIKE" + input.filterText);

    options.title = options.title || gr.getPlural();
    options.secondary_fields = options.secondary_fields || "";
    options.secondary_fields = options.secondary_fields.split(",");
    if (!options.order_by || !grTemp.isValidField(options.order_by))
        options.order_by = options.display_field;

    // Set ID of sp_page from option schema
    if (options.list_page) {
        var sp_page = GlideRecord('sp_page');
        if (sp_page.get(options.list_page))
            options.list_page_dv = sp_page.getDisplayValue('id');
    }

    // redo query with limit
    if (options.order_direction == "asc")
        gr.orderBy(options.order_by);
    else
        gr.orderByDesc(options.order_by);

    data.maxCount = 500;
    gr.setLimit(data.maxCount);
    gr.query();

    data.count = gr.getRowCount();
    data.actions = getActions();
    data.list = [];
    var recordIdx = 0;
    while (gr.next()) {
        if (options.maximum_entries &amp;&amp; recordIdx == options.maximum_entries)
            break;

        var record = {};
        if (data.actions.length &gt; 0) {
            record.Number = gr.getValue('number'); // Assuming 'number' is the field name for Number
            record.Description = gr.getValue('description'); // Assuming 'description' is the field name for Description
            record.Price = gr.getValue('price'); // Assuming 'price' is the field name for Price
            record.PostCode = gr.getValue('post_code'); // Assuming 'post_code' is the field name for Post Code
        }

        record.sys_id = gr.getValue('sys_id');
        record.className = gr.getRecordClassName();
        if (options.image_field) {
            record.image_field = gr.getDisplayValue(options.image_field);
            if (!record.image_field)
                record.image_field = "noimage.pngx";
        }

        if (options.display_field)
            record.display_field = getField(gr, options.display_field);

        record.secondary_fields = [];
        options.secondary_fields.forEach(function (f) {
            record.secondary_fields.push(getField(gr, f));
        });

        if (options.sp_page) {
            var view = "sp";
            if (options.view) {
                var viewGR = new GlideRecord("sys_ui_view");
                viewGR.get(options.view);
                view = viewGR.getValue("name");
            }
            record.url = { id: options.sp_page, table: record.className, sys_id: record.sys_id, view: view };
        } else if (options.url != '')
            record.url = options.url;
        else
            record.url = null;

        data.list.push(record);
        recordIdx++;
    }

    function getField(gr, name) {
        var f = {};
        f.display_value = gr.getDisplayValue(name);
        f.value = gr.getValue(name);
        var ge = gr.getElement(name);
        if (ge == null)
            return f;

        f.type = ge.getED().getInternalType();
        if (f.type == "glide_date_time")
            f.isFuture = gs.dateDiff(gr.getValue(name), gs.nowNoTZ(), true) &lt; 0;
        else if (f.type == "glide_date")
            f.isFuture = gs.dateDiff(gr.getValue(name), gs.now(), true) &lt; 0;
        f.label = ge.getLabel();
        return f;
    }

    function getActions() {
        return JSON.parse($sp.getSPVlistActions($sp.getValue("sys_id")));
    }

})();
]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-12-15 09:55:46&lt;/sys_created_on&gt;&lt;sys_id&gt;dae1ce7693cfb1101c3a3a5efaba1020&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Happy List Widget&lt;/sys_name&gt;&lt;sys_package display_value="HappyImmo" source="x_1129837_happyimm"&gt;4dbd9096930731101c3a3a5efaba10a4&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="HappyImmo"&gt;4dbd9096930731101c3a3a5efaba10a4&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_dae1ce7693cfb1101c3a3a5efaba1020&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-12-15 10:12:29&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div&gt;
    &lt;input type="text" ng-model="c.data.filterText" ng-show="c.showFilter" placeholder="Filter..."&gt;
    &lt;button ng-click="c.toggleFilter()"&gt;Toggle Filter&lt;/button&gt;
&lt;/div&gt;

&lt;div ng-repeat="item in c.data.list"&gt;
    &lt;div&gt;
        &lt;h3&gt;{{ c.getPropertyInfo(item).Number }}&lt;/h3&gt;
        &lt;p&gt;{{ c.getPropertyInfo(item).Description }}&lt;/p&gt;
        &lt;p&gt;Price: {{ c.getPropertyInfo(item).Price }}&lt;/p&gt;
        &lt;p&gt;Post Code: {{ c.getPropertyInfo(item).PostCode }}&lt;/p&gt;
        &lt;!-- Add any additional HTML markup for each property --&gt;
        &lt;button ng-click="c.onClick($event, item, 'yourUrl', 'yourAction')"&gt;Click me&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1309772386</payload_hash>
        <record_name>Happy List Widget</record_name>
        <reverted_from/>
        <source>41bd9096930731101c3a3a5efaba10a9</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-15 10:12:29</sys_created_on>
        <sys_id>d7b58af693cfb1101c3a3a5efaba10dd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18c6cf69a530000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-15 10:12:29</sys_updated_on>
        <type>Widget</type>
        <update_guid>9fb58af62bcfb1108f6805cada623cdc</update_guid>
        <update_guid_history>9fb58af62bcfb1108f6805cada623cdc:1309772386,27028e761ccfb11082f5a473210931ec:1330872612,dae1ce7621cfb1108ac65e299475f222:394070447</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Happy List Widget">3fe54eba93cfb1101c3a3a5efaba101e</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-15 10:13:21</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>a16b933cd30a4479bfe16b00512d8431</sys_id>
        <sys_metadata>dae1ce7693cfb1101c3a3a5efaba1020</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Happy List Widget</sys_name>
        <sys_package display_value="HappyImmo" source="x_1129837_happyimm">4dbd9096930731101c3a3a5efaba10a4</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="HappyImmo">4dbd9096930731101c3a3a5efaba10a4</sys_scope>
        <sys_scope_delete display_value="">1c3543a6040145908eb8e2564bcf0900</sys_scope_delete>
        <sys_update_name>sp_widget_dae1ce7693cfb1101c3a3a5efaba1020</sys_update_name>
        <sys_update_version display_value="sp_widget_dae1ce7693cfb1101c3a3a5efaba1020">d7b58af693cfb1101c3a3a5efaba10dd</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-15 10:13:21</sys_updated_on>
    </sys_metadata_delete>
</record_update>
